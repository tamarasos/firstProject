// Use .soql files to store SOQL queries.
// You can execute queries in VS Code by selecting the
//     query text and running the command:
//     SFDX: Execute SOQL Query with Currently Selected Text



//SELECT Email, Phone  FROM Contact

//
//## Task 1: 
//Write a SOQL query to retrieve the maximum Amount for all Opportunity records.

//SELECT MAX(Amount)
 //FROM Opportunity

 //## Task 2: 
//Write a SOQL query to retrieve the minimum CreatedDate for all Case records.

//SELECT MIN(CreatedDate)
// FROM Case

//## Task 3: 
//Write a SOQL query to retrieve the average NumberOfEmployees for all Account records where the Industry is 'Technology'.

//SELECT AVG(NumberOfEmployees)
 //FROM Account
//WHERE Industry= 'Technology'


//## Task 4: 
//Write a SOQL query to retrieve the sum of Amount for all Opportunity records where the StageName is 'Closed Won'.


//SELECT SUM(Amount)
 //FROM Opportunity
//WHERE StageName ='Closed Won' 

//## Task 5: 
//Write a SOQL query to retrieve the maximum CreatedDate for all Account records where the Type is 'Prospect'.

//select MAX(CreatedDate)
//from Account 
//WHERE Type ='Prospect' 

//## Task 6: 
//Write a SOQL query to retrieve the average ExpectedRevenue for all Opportunity records where the CloseDate is in the current year.

//SELECT AVG(ExpectedRevenue)
//FROM opportunity
//WHERE CloseDate =TODAY 

//## Task 7: 
//Write a SOQL query to retrieve the sum of NumberOfEmployees for all Account records where the Type is 'Customer' and the Industry is 'Finance'.

//select SUM(NumberOfEmployees)
///from Account 
//WHERE Type= 'Customer - Channel' 
//AND Industry ='Finance' 

//## Task 8: 
//Write a SOQL query to retrieve the minimum LastModifiedDate for all Lead records where the Status is 'Open'.

//select MIN(LastModifiedDate)
//from Lead 
//WHERE Status ='Open - Not Contacted' 

//## Task 9: 
//Write a SOQL query to retrieve the average Amount for all Opportunity records where the StageName is not equal to 'Closed Won'.

//select AVG(Amount)
//from Opportunity 
//WHERE StageName !='Closed Won' 

//## Task 10: 
//Write a SOQL query to retrieve the count of Case records where the Priority is High'.

//select COUNT(Id)
//from Case 
//WHERE Priority = 'High' 

//## Task 11: 
//Write a SOQL query to 
//retrieve the Type and the count of Account records 
//for each Type where the count of records is greater than 5.

//select COUNT(Id), Type
//from Account 
//Group by Type 
//having COUNT(id)>5

//## Task 12: 
//Write a SOQL query to 
//retrieve the Industry, the maximum AnnualRevenue, and the count of Account records 
//for each Industry where the maximum AnnualRevenue is greater than 1000000.

//select Industry, MAX(AnnualRevenue), COUNT(Id)
//from Account 
//group by Industry 
//having MAX(AnnualRevenue)>1000000

//## Task 13: 
//Write a SOQL query to 
//retrieve the LeadSource, the average NumberOfEmployees, and the count of Lead records 
//for each LeadSource where the average NumberOfEmployees is greater than 50.

//select LeadSource,  AVG(NumberOfEmployees), COUNT(id)
//from Lead 
//GROUP BY LeadSource 
//having  AVG(NumberOfEmployees)>50

//## Task 14: 
//Write a SOQL query to 
//retrieve the StageName, the sum of Amount, and the count of Opportunity records 
//for each StageName where the sum of Amount is greater than 1000000

//select StageName, SUM(Amount), COUNT(id)
//from Opportunity 
//group by StageName 
//having  SUM(Amount)>1000000



